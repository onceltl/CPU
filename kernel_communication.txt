ADDSP3 R0 0x0000
ADDSP3 R0 0x0000
NOP

;保存用户程序寄存器的地址 
;0xBF10  0xBF11 BF12 0xBF13 BF14 0xBF15
; R0    R1   R2   R3   R4   R5  

B START
NOP

DELINT:   ;中断处理程序
	NOP
	NOP
	NOP
	;保存用户程序现场
	LI R6 0xBF
	SLL R6 R6 0x0000
	ADDIU R6 0x10					;R6=0xBF10
	SW R6 R0 0x0000
	SW R6 R1 0x0001
	SW R6 R2 0x0002
	

	

	
	;R1=中断号
	LW_SP R1 0x0000
	ADDSP 0x0001
	LI R0 0x00FF
	AND R1 R0
	
	;R2=应用程序的pc
	LW_SP R2 0x0000
	ADDSP 0x0001
	
	;保存r3
	ADDSP 0xFFFF
	SW_SP R3 0x0000


	
	;保存用户程序返回地址
	ADDSP 0xFFFF
	SW_SP R7 0x0000
	
	;提示终端，进入中断处理
	LI R3 0x000F
	MFPC R7 
	ADDIU R7 0x0003  
	NOP
	B TESTW 	
	NOP
	LI R6 0x00BF 
	SLL R6 R6 0x0000 ;R6=0xBF00
	SW R6 R3 0x0000
	NOP
	;输出中断号
	MFPC R7 
	ADDIU R7 0x0003  
	NOP
	B TESTW 	
	NOP
	LI R6 0x00BF 
	SLL R6 R6 0x0000 ;R6=0xBF00 
	SW R6 R1 0x0000
	NOP
	
	;提示终端，中断处理结束
	LI R3 0x000F
	MFPC R7 
	ADDIU R7 0x0003  
	NOP
	B TESTW 	
	NOP
	LI R6 0x00BF 
	SLL R6 R6 0x0000 ;R6=0xBF00 
	SW R6 R3 0x0000
	NOP
	
	;R6保存返回地址
	ADDIU3 R2 R6 0x0000
	
	;用r3=IH（高位变成1）
	MFIH R3
	LI R0 0x0080
	SLL R0 R0 0x000
	OR R3 R0
	
	;恢复现场
	LI R7 0xBF
	SLL R7 R7 0x0000
	ADDIU R7 0x10					;R7=0xBF10
	LW R7 R0 0x0000
	LW R7 R1 0x0001
	LW R7 R2 0x0002
	
	;r7=用户程序返回地址
	LW_SP R7 0x0000
	
	ADDSP 0x0001
	ADDSP 0x0001
	NOP
	MTIH R3;
	JR R6
	LW_SP R3 0x00FF
	
	NOP	


;init  0x8251
START:
	;初始化IH寄存器，最高位为1时，允许中断，为0时不允许。初始化为0，kernel不允许中断
	LI R0 0x07
	MTIH R0
	;初始化栈地址
	LI R0 0x00BF 
	SLL R0 R0 0x0000
	ADDIU R0 0x10					;R0=0xBF10 
	MTSP R0
	NOP
	
	;用户寄存器值初始化
	LI R6 0x00BF 
	SLL R6 R6 0x0000
	ADDIU R6 0x10					;R6=0xBF10 
	LI R0 0x0000
	SW R6 R0 0x0000
	SW R6 R0 0x0001
	SW R6 R0 0x0002
	SW R6 R0 0x0003
	SW R6 R0 0x0004
	SW R6 R0 0x0005
		
	;WELCOME
	MFPC R7 
	ADDIU R7 0x0003  
	NOP
	B TESTW 	
	LI R6 0x00BF 
	SLL R6 R6 0x0000 
	LI R0 0x004F
	SW R6 R0 0x0000
	NOP
	
	MFPC R7 
	ADDIU R7 0x0003  
	NOP
	B TESTW 	
	LI R6 0x00BF 
	SLL R6 R6 0x0000 
	LI R0 0x004B
	SW R6 R0 0x0000
	NOP
	
	MFPC R7 
	ADDIU R7 0x0003  
	NOP
	B TESTW 	
	LI R6 0x00BF 
	SLL R6 R6 0x0000 
	LI R0 0x000A
	SW R6 R0 0x0000
	NOP
	
	MFPC R7 
	ADDIU R7 0x0003  
	NOP
	B TESTW 	
	LI R6 0x00BF 
	SLL R6 R6 0x0000 
	LI R0 0x000D
	SW R6 R0 0x0000
	NOP
	

	

	

	
BEGIN:          ;检测命令
	;接收字符，保存到r1
	MFPC R7
	ADDIU R7 0x0003	
	NOP	
	B TESTR	
	NOP
	LI R6 0x00BF 
	SLL R6 R6 0x0000 
	LW R6 R1 0x0000
	LI R6 0x00ff 
  AND R1 R6 
	NOP	
	

	;检测是否为R命令		
	LI R0 0x0052
	CMP R0 R1
	BTEQZ SHOWREGS	
	NOP	
	;检测是否为D命令
	LI R0 0x0044
	CMP R0 R1
	BTEQZ SHOWMEM
	NOP	
	
	;检测是否为A命令
	LI R0 0x0041
	CMP R0 R1
	BTEQZ GOTOASM
	NOP	
	
	;检测是否为U命令
	LI R0 0x0055
	CMP R0 R1
	BTEQZ GOTOUASM
	NOP	
	;检测是否为G命令
	LI R0 0x0047
	CMP R0 R1
	BTEQZ GOTOCOMPILE
	NOP		
	
	;检测是否为C命令
	LI R0 0x0043
	CMP R0 R1
	BTEQZ GOTO_CONNECT
	NOP		
	
	B BEGIN
	NOP

;各处理块的入口
GOTOUASM:
	NOP
	B UASM
	NOP
GOTOASM:
	NOP
	B ASM
	NOP
	
GOTOCOMPILE:
	NOP
	B COMPILE
	NOP
	
GOTO_CONNECT:
	NOP
	B TOCONNECT
	NOP

	;测试8251是否能写
TESTW:	
	NOP	 		
	LI R6 0x00BF 
	SLL R6 R6 0x0000 
	ADDIU R6 0x0001 
	LW R6 R0 0x0000 
	LI R6 0x0001 
	AND R0 R6 
	BEQZ R0 TESTW     ;BF01&1=0 则等待	
	NOP		
	JR R7
	NOP 
	

	
;测试8251是否能读
TESTR:	
	NOP	
	LI R6 0x00BF 
	SLL R6 R6 0x0000 
	ADDIU R6 0x0001 
	LW R6 R0 0x0000 
	LI R6 0x0002
	AND R0 R6 
	BEQZ R0 TESTR   ;BF01&2=0  则等待	
	NOP	
	JR R7
	NOP 		
	

	
SHOWREGS:    ;R命令，打印R0-R5
	LI R1 0x0006  ;R1递减  
	LI R2 0x0006   ;R2不变
	
LOOP:
	LI R0  0x00BF
	SLL R0 R0 0x0000
	ADDIU R0 0x0010
	SUBU R2 R1 R3   ;R3=0,1,2,3
	ADDU R0 R3 R0   ;R0=BF10...
	LW R0 R3 0x0000    ;R3=用户程序的 R0,R1,R2	

	;发送低八位
	MFPC R7
	ADDIU R7 0x0003	
	NOP
	B TESTW	
	NOP	
	LI R6 0x00BF 
	SLL R6 R6 0x0000 ;R6=BF00	
	SW R6 R3 0x0000	
	;发送高八位
	SRA R3 R3 0x0000
	MFPC R7
	ADDIU R7 0x0003	
	NOP
	B TESTW	
	NOP	
	LI R6 0x00BF 
	SLL R6 R6 0x0000 ;R6=0xBF00	
	SW R6 R3 0x0000	
	
	ADDIU R1 0xFFFF
	NOP
	BNEZ R1 LOOP
	NOP	
	B BEGIN
	NOP
	
  

	
	
	
SHOWMEM:  ;查看内存	
;D读取地址低位到r5
	MFPC R7
	ADDIU R7 0x0003	
	NOP	
	B TESTR	
	NOP
	LI R6 0x00BF 
	SLL R6 R6 0x0000 
	LW R6 R5 0x0000	
	LI R6 0x00FF
	AND R5 R6
	NOP	
	
	;读取地址高位到r1
	MFPC R7
	ADDIU R7 0x0003	
	NOP	
	B TESTR	
	NOP
	LI R6 0x00BF 
	SLL R6 R6 0x0000 
	LW R6 R1 0x0000
	LI R6 0x00FF
	AND R1 R6
	NOP	
	
	
	
	;R1存储地址
	SLL R1 R1 0x0000
	OR R1 R5
	
	;读取显示次数低位到R5
	MFPC R7
	ADDIU R7 0x0003	
	NOP	
	B TESTR	
	NOP
	LI R6 0x00BF 
	SLL R6 R6 0x0000 
	LW R6 R5 0x0000
	LI R6 0x00FF
	AND R5 R6
	NOP	
	;读取显示次数高位到R2
	MFPC R7
	ADDIU R7 0x0003	
	NOP	
	B TESTR	
	NOP
	LI R6 0x00BF 
	SLL R6 R6 0x0000 
	LW R6 R2 0x0000
	LI R6 0x00FF
	AND R2 R6
	NOP	
	;R2保存内存个数
	SLL R2 R2 0x0000
	OR R2 R5

	
		;循环发出	
	
MEMLOOP:		
	
	LW R1 R3 0x0000    ;R3为内存数据	

	;发送低八位
	MFPC R7
	ADDIU R7 0x0003	
	NOP
	B TESTW	
	NOP	
	LI R6 0x00BF 
	SLL R6 R6 0x0000 ;R6=0xBF00	
	SW R6 R3 0x0000	
	;发送高八位

	SRA R3 R3 0x0000
	MFPC R7
	ADDIU R7 0x0003	
	NOP
	B TESTW	
	NOP	
	LI R6 0x00BF 
	SLL R6 R6 0x0000 ;R6=0xBF00	
	SW R6 R3 0x0000	
	
	ADDIU R1 0x0001   ;R1=地址加加加
	ADDIU R2 0xFFFF
	NOP
	BNEZ R2 MEMLOOP
	NOP	

	B BEGIN
	NOP		


 ;汇编	
ASM:  
	;A命令读取地址低位到r5
	MFPC R7
	ADDIU R7 0x0003	
	NOP	
	B TESTR	
	NOP
	LI R6 0x00BF 
	SLL R6 R6 0x0000 
	LW R6 R5 0x0000
	LI R6 0x00FF
	AND R5 R6
	NOP	
	;读取地址高位到r1
	MFPC R7
	ADDIU R7 0x0003	
	NOP	
	B TESTR	
	NOP
	LI R6 0x00BF 
	SLL R6 R6 0x0000 
	LW R6 R1 0x0000
	LI R6 0x00FF
	AND R1 R6
	NOP	
	
	;R1存储地址
	SLL R1 R1 0x0000
	OR R1 R5
	
	
	
	
	;检测地址是否合法
	LI R0 0x0000
	CMP R0 R1      
  BTEQZ GOTOBEGIN
	NOP	
	
 
	;读取数据低位到R5
	MFPC R7
	ADDIU R7 0x0003	
	NOP	
	B TESTR	
	NOP
	LI R6 0x00BF 
	SLL R6 R6 0x0000 
	LW R6 R5 0x0000
	LI R6 0x00FF
	AND R5 R6
	NOP	
	

	;读取数据高位到R2
	MFPC R7
	ADDIU R7 0x0003	
	NOP	
	B TESTR	
	NOP
	LI R6 0x00BF 
	SLL R6 R6 0x0000 
	LW R6 R2 0x0000
	LI R6 0x00FF
	AND R2 R6
	NOP	
	;R2保存数据
	SLL R2 R2 0x0000
	OR R2 R5
			
	SW R1 R2 0x0000	
	NOP
	
	B ASM
	NOP
	
GOTOBEGIN:
	NOP
	B BEGIN
	NOP
	
	
	
	
;反汇编：将需要反汇编的地址处的值发给终端处理	
UASM:
;读取地址低位到r5
	MFPC R7
	ADDIU R7 0x0003	
	NOP	
	B TESTR	
	NOP
	LI R6 0x00BF 
	SLL R6 R6 0x0000 
	LW R6 R5 0x0000
	LI R6 0x00FF
	AND R5 R6
	NOP	
	;读取地址高位到r1
	MFPC R7
	ADDIU R7 0x0003	
	NOP	
	B TESTR	
	NOP
	LI R6 0x00BF 
	SLL R6 R6 0x0000 
	LW R6 R1 0x0000
	LI R6 0x00FF
	AND R1 R6
	NOP	
	
	
	
	;R1存储地址
	SLL R1 R1 0x0000
	OR R1 R5
	
	;读取显示次数低位到R5
	MFPC R7
	ADDIU R7 0x0003	
	NOP	
	B TESTR	
	NOP
	LI R6 0x00BF 
	SLL R6 R6 0x0000 
	LW R6 R5 0x0000
	LI R6 0x00FF
	AND R5 R6
	NOP	
	;读取显示次数高位到R2
	MFPC R7
	ADDIU R7 0x0003	
	NOP	
	B TESTR	
	NOP
	LI R6 0x00BF 
	SLL R6 R6 0x0000 
	LW R6 R2 0x0000
	LI R6 0x00FF
	AND R2 R6
	NOP	
	;R2保存内存个数
	SLL R2 R2 0x0000
	OR R2 R5

	
		;循环发出	
	
UASMLOOP:		
	
	LW R1 R3 0x0000    ;R3为内存数据	

	;发送低八位
	MFPC R7
	ADDIU R7 0x0003	
	NOP
	B TESTW	
	NOP	
	LI R6 0x00BF 
	SLL R6 R6 0x0000 ;R6=0xBF00	
	SW R6 R3 0x0000	
	;发送高八位

	SRA R3 R3 0x0000
	MFPC R7
	ADDIU R7 0x0003	
	NOP
	B TESTW	
	NOP	
	LI R6 0x00BF 
	SLL R6 R6 0x0000 ;R6=0xBF00	
	SW R6 R3 0x0000	
	
	ADDIU R1 0x0001   ;R1=地址加加加
	ADDIU R2 0xFFFF
	NOP
	BNEZ R2 UASMLOOP
	NOP	

	B BEGIN
	NOP			
	
;连续执行
COMPILE:
	;读取地址低位到R5
	MFPC R7
	ADDIU R7 0x0003	
	NOP	
	B TESTR	
	NOP
	LI R6 0x00BF 
	SLL R6 R6 0x0000 
	LW R6 R5 0x0000
	LI R6 0x00FF
	AND R5 R6
	NOP	
	;读取内存高位到R2
	MFPC R7
	ADDIU R7 0x0003	
	NOP	
	B TESTR	
	NOP
	LI R6 0x00BF 
	SLL R6 R6 0x0000 
	LW R6 R2 0x0000
	LI R6 0x00FF
	AND R2 R6
	NOP	
	;R2保存内存地址  传给r6
	SLL R2 R2 0x0000
	OR R2 R5
	ADDIU3 R2 R6 0x0000
	
	
	LI R7 0x00BF
	SLL R7 R7 0x0000
	ADDIU R7 0x0010
	
	LW R7 R5 0x0005
	ADDSP 0xFFFF
	SW_SP R5 0x0000
	
	
	;中断保存在R5中
	MFIH R5
	LI R1 0x0080
	SLL R1 R1 0x000
	OR R5 R1
	
	
	
	;恢复现场
	LW R7 R0 0x0000
	LW R7 R1 0x0001
	LW R7 R2 0x0002
	LW R7 R3 0x0003
	LW R7 R4 0x0004
	
	
	
	MFPC R7
	ADDIU R7 0x0004
	MTIH R5    ;IH高位赋1	
	JR R6
	LW_SP R5 0x0000  ;R5恢复现场
	
	;用户程序执行完毕，返回kernel，保存现场
	NOP
	NOP
	ADDSP 0x0001
	LI R7 0x00BF
	SLL R7 R7 0x0000
	ADDIU R7 0x0010
	
	SW R7 R0 0x0000
	SW R7 R1 0x0001
	SW R7 R2 0x0002
	SW R7 R3 0x0003
	SW R7 R4 0x0004
	SW R7 R5 0x0005
	
	;IH高位赋0
	MFIH R0
	LI R1 0x007F
	SLL R1 R1 0x0000
	LI R2 0x00FF
	OR R1 R2	
	AND R0 R1
	MTIH R0
	
	;给终端发送结束用户程序提示
	LI R1 0x0007
	MFPC R7
	ADDIU R7 0x0003	
	NOP
	B TESTW	
	NOP	
	LI R6 0x00BF 
	SLL R6 R6 0x0000 ;R6=0xBF00	
	SW R6 R1 0x0000		
	B BEGIN
	NOP	
		
	
GOTOBEGIN_COMM:
	NOP
	B BEGIN
	NOP


;循环等待读串口
TESTRSER:	;用了R0 R6
	NOP	
	LI R6 0x00BF 
	SLL R6 R6 0x0000 
	ADDIU R6 0x0001 
	LW R6 R0 0x0000 
	LI R6 0x0002
	AND R0 R6 
	BEQZ R0 TESTRSER   ;BF01&2=0  则等待	
	NOP	
	JR R7
	NOP 	
	
;判断串口是否可读
CHECKRSER:	;用了R0 R6
	NOP	
	LI R6 0x00BF 
	SLL R6 R6 0x0000 
	ADDIU R6 0x0001 
	LW R6 R0 0x0000 
	LI R6 0x0002
	AND R6 R0 
	JR R7
	NOP

;判断PS2是否可读
CHECKRPS2:	;用了R0 R6
	NOP	
	LI R6 0x00BF 
	SLL R6 R6 0x0000 
	ADDIU R6 0x0005 
	LW R6 R0 0x0000 
	LI R6 0x0002
	AND R6 R0 
	JR R7
	NOP
	
;循环等待写串口
TESTWSER:	;用了R0 R6
	NOP	
	LI R6 0x00BF 
	SLL R6 R6 0x0000 
	ADDIU R6 0x0001 
	LW R6 R0 0x0000 
	LI R6 0x0001
	AND R0 R6 
	BEQZ R0 TESTWSER   ;BF01&2=0  则等待	
	NOP	
	JR R7
	NOP 	

;判断串口是否可写
CHECKWSER:	;用了R0 R6
	NOP	
	LI R6 0x00BF 
	SLL R6 R6 0x0000 
	ADDIU R6 0x0001 
	LW R6 R0 0x0000 
	LI R6 0x0001
	AND R6 R0 
	JR R7
	NOP
	
;清空vga一整行
CLEARLINE:	;用了R0 R2 R6
	LI R2 0x0020  ;回退字符数量 可根据实际修改

	LI R6 0x00BF 
	SLL R6 R6 0x0000 ;R6=BF00	
	LI R0 0x0008	;退格
CLEARLINELOOP:	
	SW R6 R0 0x0006
	
	ADDIU R2 0xFFFF
	BNEZ R2 CLEARLINELOOP
	NOP
	JR R7
	NOP

;建立连接	
TOCONNECT:
	LI R6 0x00BF
	SLL R6 R6 0x0000

	LI R1 0x0057	;W
	SW R6 R1 0x0006
	LI R1 0x0061	;a
	SW R6 R1 0x0006
	LI R1 0x0069	;i
	SW R6 R1 0x0006
	LI R1 0x0074	;t
	SW R6 R1 0x0006
	LI R1 0x0069	;i
	SW R6 R1 0x0006
	LI R1 0x006E	;n
	SW R6 R1 0x0006
	LI R1 0x0067	;g
	SW R6 R1 0x0006
	LI R1 0x002E	;.
	SW R6 R1 0x0006
	LI R1 0x002E	;.
	SW R6 R1 0x0006
	LI R1 0x002E	;.
	SW R6 R1 0x0006
	LI R1 0x000D	;enter
	SW R6 R1 0x0006

CONNECTLOOP:
	MFPC R7
	ADDIU R7 0x0003	
	NOP
	B TESTRSER
	NOP

	LI R0 0x00BF
	SLL R0 R0 0x0000
	;read serial into r1
	LW R0 R1 0x0000
	
	;if recv "10000000" then begin communication
	LI R2 0x0080
	CMP R1 R2
	BTEQZ COMMUNICATION_WELCOME
	NOP
	B CONNECTLOOP
	NOP

COMMUNICATION_WELCOME:
	LI R6 0x00BF
	SLL R6 R6 0x0000
	
	LI R1 0x0043	;C
	SW R6 R1 0x0006
	LI R1 0x006F	;o
	SW R6 R1 0x0006
	LI R1 0x006E	;n
	SW R6 R1 0x0006
	LI R1 0x006E	;n
	SW R6 R1 0x0006
	LI R1 0x0065	;e
	SW R6 R1 0x0006
	LI R1 0x0063	;c
	SW R6 R1 0x0006
	LI R1 0x0074	;t
	SW R6 R1 0x0006
	LI R1 0x0065	;e
	SW R6 R1 0x0006
	LI R1 0x0064	;d
	SW R6 R1 0x0006
	LI R1 0x000D	;enter
	SW R6 R1 0x0006
	
;双机通讯
;R5用来表示当前正在屏幕上的字符有多少个
COMMUNICATION:
	LI R5 0x0000;本机写缓冲区初始化
	NOP

TESTRECV:
	MFPC R7
	ADDIU R7 0x0003
	NOP
	B CHECKRSER
	NOP
	BEQZ R6 UPDATE_BUFFER
	NOP
	
	;开始准备连续读对面发来的信息
	MFPC R7
	ADDIU R7 0x0003
	NOP
	B CLEARLINE
	NOP
	
	;对面的信息前加一个'>'标识符
	LI R6 0x00BF
	SLL R6 R6 0x0000
	LI R1 0x003E	;>
	SW R6 R1 0x0006	
	
;循环读入对面串口发来的消息
TESTRECV_LOOP:
	LI R6 0x00BF 
	SLL R6 R6 0x0000 
	LW R6 R1 0x0000
	LI R6 0x00FF
	AND R1 R6 ;避免高八位带来的影响
	NOP	
	;R1为对方发来的字符
	;检测是否为结束命令		
	LI R0 0x00FF
	CMP R0 R1
	NOP
	BTEQZ COMUNEND
	NOP
	;写入到vga
	LI R6 0x00BF 
	SLL R6 R6 0x0000 
	;LI R0 0x004F
	SW R6 R1 0x0006
	
	;检测是否为enter
	LI R0 0x000D
	CMP R0 R1
	NOP
	BTEQZ TESTRECV_END
	NOP	
	
	;不为enter继续接受字符,注意此处要循环等，退出循环条件只有“对面发来enter”
	MFPC R7
	ADDIU R7 0x0003
	NOP
	B TESTRSER
	NOP
	B TESTRECV_LOOP
	NOP
	
;接收信息完成 将自己的缓存区内容写回到屏幕的当前行
TESTRECV_END:
	LI R2 0x0000
	LI R0 0x00BF
	SLL R0 R0 0x0000
	ADDIU R0 0x0020	;R0 = BF20
	
TESTRECV_END_LOOP:
	CMP R2 R5
	NOP
	BTEQZ UPDATE_BUFFER
	NOP

	ADDIU R2 0x0001	;start at 1
	ADDU R0 R2 R1
	LW R1 R1 0x0000
	;写入到vga
	LI R6 0x00BF 
	SLL R6 R6 0x0000 
	SW R6 R1 0x0006
	B TESTRECV_END_LOOP
	NOP

;测试键盘是否有输入
UPDATE_BUFFER:
	MFPC R7
	ADDIU R7 0x0003
	NOP
	;跳转到判断ps2是否可读写(看看同良是否写了这部分函数可以直接用的)
	B CHECKRPS2
	NOP
	;BEQZ R6 TESTSEND
	BEQZ R6 TESTRECV	;跳回开头，不重置R5
	NOP
	;从键盘拿数据to R1
	LI R6 0x00BF 
	SLL R6 R6 0x0000 
	LW R6 R1 0x0004
	LI R6 0x00FF
	AND R1 R6 
	
	;存到缓存区
	LI R0 0x00BF
	SLL R0 R0 0x0000
	ADDIU R0 0x0020
	ADDIU R5 0x0001	;R5 start at 1
	ADDU R0 R5 R2
	SW R2 R1 0x0000
	
	;放上VGA
	LI R6 0x00BF 
	SLL R6 R6 0x0000 
	SW R6 R1 0x0006	
	
TESTSEND:
	;数据还在R1
	;LI R0 0x00BF
	;SLL R0 R0 0x0000
	;ADDIU R0 0x0020
	;ADDU R0 R5 R2
	;LW R2 R1 0x0000
	
	;检测是否为结束命令		
	LI R0 0x001B	;Esc
	CMP R0 R1
	NOP
	BTEQZ SEND_ENDMSG
	NOP
	
	;检测是否为enter
	LI R0 0x000D
	CMP R0 R1
	NOP
	BTEQZ SENDMSG
	NOP	
	B TESTRECV
	NOP
	
	
	
	
SENDMSG:
	LI R2 0x0000
	LI R3 0x00BF ;使用R3以避免与子程序寄存器冲突，省去保存寄存器步骤
	SLL R3 R3 0x0000
	ADDIU R3 0x0020
	
SENDMSG_LOOP:	
	;若发完，回到最开始
	CMP R2 R5
	NOP
	BTEQZ COMMUNICATION	;发完一行R5变回0
	NOP
	ADDIU R2 0x0001

	MFPC R7
	ADDIU R7 0x0003
	NOP
	B TESTWSER
	NOP

	ADDU R3 R2 R1
	LW R1 R1 0x0000
	
	LI R6 0x00BF 
	SLL R6 R6 0x0000 
	SW R6 R1 0x0000
	NOP
	B SENDMSG_LOOP
	NOP

SEND_ENDMSG:
	MFPC R7
	ADDIU R7 0x0003
	NOP
	B TESTWSER
	NOP
	LI R1 0x00FF
	LI R6 0x00BF 
	SLL R6 R6 0x0000 
	SW R6 R1 0x0000
;会话结束 回到主界面
COMUNEND:	

	LI R6 0x00BF
	SLL R6 R6 0x0000

	LI R1 0x000D	;enter
	SW R6 R1 0x0006
	LI R1 0x0044	;D
	SW R6 R1 0x0006
	LI R1 0x0068	;i
	SW R6 R1 0x0006
	LI R1 0x0073	;s
	SW R6 R1 0x0006
	LI R1 0x0063	;c
	SW R6 R1 0x0006
	LI R1 0x006F	;o
	SW R6 R1 0x0006
	LI R1 0x006E	;n
	SW R6 R1 0x0006
	LI R1 0x006E	;n
	SW R6 R1 0x0006
	LI R1 0x0065	;e
	SW R6 R1 0x0006
	LI R1 0x0063	;c
	SW R6 R1 0x0006
	LI R1 0x0074	;t
	SW R6 R1 0x0006
	LI R1 0x0065	;e
	SW R6 R1 0x0006
	LI R1 0x0064	;d
	SW R6 R1 0x0006
	LI R1 0x000D	;enter
	SW R6 R1 0x0006
	
	B GOTOBEGIN_COMM
	NOP
	